name: Terraform Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      # Étape 1: Checkout du code source
      - name: Checkout code
        uses: actions/checkout@v2

      # Étape 2: Configurer Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.4.0'

      # Étape 3: Authentification à Azure
      - name: Set up Azure Credentials
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Étape 4: Initialiser Terraform
      - name: Terraform Init
        run: terraform init

      # Étape 5: Générer le Plan Terraform
      - name: Terraform Plan
        run: terraform plan
        id: plan

      # Étape 6: Upload du Plan Terraform pour approbation manuelle
      - name: Upload Terraform Plan as Artifact
        uses: actions/upload-artifact@v2
        with:
          name: terraform-plan
          path: plan.tfplan

      # Étape 7: Attendre l'approbation manuelle pour appliquer le plan
      - name: Apply Terraform Plan (Manual Approval)
        if: github.event_name == 'workflow_dispatch'
        run: |
          terraform apply plan.tfplan

#ajout du apply de flux/gitops
#kubectl apply -f du kustomize
#Manual destroy
#az aks get-credentials --resource-group aks-demo-rg --name aks-cluster --overwrite-existing  pour rewrite du context kube
#automatiser lorsque nouvelle version du json-server update manifest du gitops via workflow
#voir partie + sre (grafana etc)